{"version":3,"sources":["components/PageHeader.js","components/PageContent.js","components/PageFooter.js","pages/Home.js","pages/Result.js","App.js","serviceWorker.js","index.js"],"names":["PageHeader","children","className","PageContent","PageFooter","Home","alt","height","id","src","srcset","style","paddingTop","marginBottom","width","action","method","fill","xmlns","viewBox","d","type","name","autocomplete","tabindex","aria-hidden","autofocus","value","aria-label","href","Result","to","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6WAWeA,MARf,YAAiC,IAAZC,EAAW,EAAXA,SACnB,OACE,4BAAQC,UAAU,eACfD,I,MCKQE,MARf,YAAkC,IAAZF,EAAW,EAAXA,SACpB,OACE,0BAAMC,UAAU,gBACbD,I,MCKQG,MARf,YAAiC,IAAZH,EAAW,EAAXA,SACnB,OACE,4BAAQC,UAAU,eACfD,I,MCwCQI,MAvCf,WACE,OACE,yBAAKH,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,yBAAKA,UAAU,wBACb,yBAAKI,IAAI,SAASC,OAAO,KAAKC,GAAG,SAASC,IAAI,qFAAqFC,OAAO,+KAA+KC,MAAO,CAACC,WAAY,OAAQC,aAAc,OAAQC,MAAM,QACjX,6BACA,0BAAMC,OAAO,UAAUC,OAAO,OAC5B,yBAAKd,UAAU,iBACb,yBAAKA,UAAU,eACb,yBAAKe,KAAK,UAAUC,MAAM,6BAA6BC,QAAQ,aAAY,0BAAMC,EAAE,iNAErF,2BAAOlB,UAAU,QAAQmB,KAAK,OAAOC,KAAK,IAAIC,aAAa,MAAMC,SAAS,KAAKC,cAAY,OAAOC,WAAS,IAC3G,yBAAKxB,UAAU,qBAEjB,6BACA,6BACE,gCACE,2BAAOA,UAAU,eAAemB,KAAK,SAASC,KAAK,SAASK,MAAM,gBAAgBC,aAAW,kBAC7F,2BAAO1B,UAAU,eAAemB,KAAK,SAASC,KAAK,gBAAgBK,MAAM,oBAAoBC,aAAW,yBAI9G,6BACA,yBAAK1B,UAAU,wBAAf,qBAEE,uBAAG2B,KAAK,MAAR,SACA,uBAAGA,KAAK,MAAR,QACA,uBAAGA,KAAK,MAAR,gCACA,uBAAGA,KAAK,MAAR,sBAIN,kBAAC,EAAD,QC7BSC,MATf,WACE,OACE,yBAAK5B,UAAU,UACb,2CACA,kBAAC,IAAD,CAAM6B,GAAG,KAAT,qBCiBSC,MAjBf,WACE,OACE,yBAAK9B,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+B,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCJQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2a8965e1.chunk.js","sourcesContent":["import React from 'react';\nimport './PageHeader.scss';\n\nfunction PageHeader({children}) {\n  return (\n    <header className=\"page-header\">\n      {children}\n    </header>\n  )\n}\n\nexport default PageHeader;\n","import React from 'react';\nimport './PageContent.scss';\n\nfunction PageContent({children}) {\n  return (\n    <main className=\"page-content\">\n      {children}\n    </main>\n  )\n}\n\nexport default PageContent;\n","import React from 'react';\nimport './PageFooter.scss';\n\nfunction PageFooter({children}) {\n  return (\n    <footer className=\"page-footer\">\n      {children}\n    </footer>\n  )\n}\n\nexport default PageFooter;\n","import React from 'react';\n// import { Link } from 'react-router-dom';\nimport PageHeader from '../components/PageHeader';\nimport PageContent from '../components/PageContent';\nimport PageFooter from '../components/PageFooter';\nimport './Home.scss';\n\nfunction Home() {\n  return (\n    <div className=\"Home\">\n      <PageHeader />\n      <PageContent>\n        <div className=\"flex-column-centered\">\n          <img alt=\"Google\" height=\"92\" id=\"hplogo\" src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\" srcset=\"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png 1x, https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png 2x\" style={{paddingTop: '32px', marginBottom: '8px'}} width=\"272\"></img>\n          <br/>\n          <form action=\"/result\" method=\"get\">\n            <div className=\"input-wrapper\">\n              <div className=\"search-icon\">\n                <svg fill=\"#9AA0A6\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"></path></svg>\n              </div>\n              <input className=\"input\" type=\"text\" name=\"q\" autocomplete=\"off\" tabindex=\"-1\" aria-hidden=\"true\" autofocus />\n              <div className=\"microphone-icon\"></div>\n            </div>\n            <br/>\n            <div>\n              <center>\n                <input className=\"input-button\" type=\"submit\" name=\"search\" value=\"Google Search\" aria-label=\"Google Search\" />\n                <input className=\"input-button\" type=\"submit\" name=\"feeling_lucky\" value=\"I'm Feeling Lucky\" aria-label=\"I'm Feeling Lucky\" />\n              </center>\n            </div>\n          </form>\n          <br/>\n          <div className=\"additional-languages\">\n            Google offered in:\n            <a href=\"/#\">Hausa</a>\n            <a href=\"/#\">Igbo</a>\n            <a href=\"/#\">Èdè Yorùbá</a>\n            <a href=\"/#\">Nigerian Pidgin</a>\n          </div>\n        </div>\n      </PageContent>\n      <PageFooter />\n    </div>\n  )\n}\n\nexport default Home;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Result() {\n  return (\n    <div className=\"Result\">\n      <h1>Result page</h1>\n      <Link to=\"/\">Go to Home page</Link>\n    </div>\n  )\n}\n\nexport default Result;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.scss';\n\nimport Home from './pages/Home';\nimport Result from './pages/Result';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/result\">\n            <Result />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}